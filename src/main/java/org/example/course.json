{
  "summary" : "Zadania domowe dla kursu Java od podstaw",
  "title" : "SDA Java PL",
  "authors" : [
    "SDA"
  ],
  "programming_language" : "JAVA",
  "language" : "pl",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "Java Podstawy",
      "items" : [
        {
          "title" : "Wprowadzenie",
          "task_list" : [
            {
              "name" : "Witaj świecie",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Uruchom mnie!\");\n    }\n}"
                }
              },
              "description_text" : "## Wprowadzenie do IntelliJ EduTools\n\nIntelliJ EduTools to wspaniałe narzędzie, które idealnie nadaje się do nauki programowania w języku **Java** w formie zadań domowych.\n\nŚciągnięte przez Ciebie repozytorium odnosi się do konkretnego modułu w kursie, którego jesteś uczniem. Warto zauważyć, że repozytorium to zostało podzielone na lekcje, gdzie każda z lekcji ma jedno lub kilka zadań.\n\nZadania można podzielić na kilka kategorii:\n* **Teoretyczne** - przedstawiają i omawiają kwestie teoretyczne. W tego typu zadaniach nie piszesz kodu lecz uczysz bądź powtarzasz różne zagadnienia. Może zdarzyć się tak, że zostanie Ci przedstawiony jakiś gotowy program. Aby zobaczyć efekty jego działania, należy kliknąć przycisk `Run`.\n\n* **Weryfikacyjne** - weryfikują Twoją wiedzę teoretyczną za pomocą prostych testów.\n\n* **Praktyczne** - wymagają rozwiązania przedstawionego zadania. Mogą dostarczać częściowo już napisany kod i wymagać od Ciebie dokończenia programu tak aby osiągnąć oczekiwany rezultat. Mogą też oczekiwać napisania całego programu od podstaw. Twoje rozwiązania zawsze weryfikowane są pod kątem poprawności i zadanie zostaje zaliczone tylko wtedy, kiedy program zachowuje się tak jak to zostało przedstawione w wymaganiach zadania. Istnieje także możliwośc podglądu rozwiązania. Mimo wszystko staraj się samemu rozwiązywać problemy i nie korzystać z tej opcji. \n\n\nAby sprawdzić, czy rozwiązanie zadania lub odpowiedzi w teście są poprawne, należy kliknąć przycisk `Check`. Jeżeli wszystko się udało, można przejśc do następnego zadania klikając przycisk `Next`.\n\n---\n\nPrzejdź do przykładowego zadania klikając przycisk `Next` poniżej.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Hello world",
                  "status" : "CORRECT"
                },
                {
                  "text" : "Aloha!",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Hallo Welt!",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Dzień dobry",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "Pierwszy quiz",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Pierwszy program, jaki pisze każdy programista nazywa się:",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "name" : "Pierwsze zadanie",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 73,
                      "length" : 51,
                      "possible_answer" : "System.out.println(\"Hello world\");",
                      "placeholder_text" : "// Zapisz tutaj: System.out.println(\"Hello world\");"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "public class Task {\n    public static void main(String[] args) {\n        // Zapisz tutaj: System.out.println(\"Hello world\");\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        Task.main(new String[]{});\n\n        assertEquals(\"Wyświetl na ekranie tekst \\\"Hello world\\\"\", \"Hello world\", outContent.toString().trim());\n    }\n\n}\n"
                }
              },
              "description_text" : "## Witaj świecie\n\nWszyscy wybitni programiści zaczeli swoją przygodę z programowaniem od napisania programu \"Hello world\" (pol. *witaj świecie*).\n\nCelem programu jest po uruchomieniu wyświetlić tekst o treści `Hello world`, a nastepnie zakończyć działanie. To naprostszy możliwy program, jaki da się napisać w każdym języku programowania.\n\nW Javie do wyświetlania tekstu na ekranie służy polecenie `System.out.println`. W nawiasach należy podać tekst, który ma zostać wyświetlony na ekranie.\n\nTekst w Javie podajemy zawsze w cudzysłowiach (`\"\"`), np. `\"Jakiś tekst\"` czy `\"Cokolwiek\"`.\n\nZapisanie następującego programu:\n\n```java\npublic class Task {\n    public static void main(String[] args) {\n        System.out.println(\"Jakiś tekst\");\n    }\n}\n```\n\ni uruchomienie za pomocą polecenia `Run` (zielony trójkąt w prawym górnym rogu) spowoduje wyświetlenie następującego rezultatu:\n\n```text\nJakiś tekst\n```\n\n---\n\nUzbrojony/a w tę wiedzę, napisz swój pierwszy program, który na ekranie wydrukuje tekst `\"Hello world\"`. Uruchom go, żeby sprawdzić, czy działa prawidłowo. Kiedy będziesz pewny/a, ze jest ok, wciśnij przycisk `Check` poniżej. \n\nJeżeli program działa poprawnie, wciśnij przycisk `Next` aby przejść do właściwej sekcji dotyczącej danego modułu kursu.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Quiz",
          "task_list" : [
            {
              "choiceOptions" : [
                {
                  "text" : "print(\"Hello World\");",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "System.out.println(\"Hello World\");",
                  "status" : "CORRECT"
                },
                {
                  "text" : "Console.WriteLine(\"Hello World\");",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "echo(\"Hello World\");",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question01",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jak w Javie wypisać tekst \"Hello World\" w konsoli?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "// komentarz",
                  "status" : "CORRECT"
                },
                {
                  "text" : "/* komentarz",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "# komentarz",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "!-- komentarz",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question02",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jak w Javie wstawić komentarz w kodzie?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "myString",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "string",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Txt",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "String",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question03",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Który typ danych używany jest do przechowywania tekstu w Javie?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "x = 5;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "float x = 5;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "int x = 5;",
                  "status" : "CORRECT"
                },
                {
                  "text" : "num x = 5;",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question04",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jak tworzy się zmienną liczbową całkowitą o wartości 5 w Javie?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "byte x = 2.8f;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "float x = 2.8f;",
                  "status" : "CORRECT"
                },
                {
                  "text" : "int x = 2.8f;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "x = 2.8f;",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question05",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jak tworzy się zmienną zmiennoprzecinkową o wartości 2,8 w Javie?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "getLenght()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "len()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "getSize()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "length()",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question06",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Która metoda służy do sprawdzenia długości tekstu w klasie `String`?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Prawda",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Fałsz",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question07",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Wartość zmiennej typu `String` może być alternatywnie do cudzysłowów opatrzona apostrofami.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "upperCase()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "toUpperLetters()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "upperLetters()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "toUpperCase()",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question08",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Która metoda służy do zamiany liter w tekście na wielkie litery?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "[]{}",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "[]",
                  "status" : "CORRECT"
                },
                {
                  "text" : "{}",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question09",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Aby zadeklarować tablicę w Javie, należy do typu zmiennej dodać: ",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "MyClass myObj = new MyClass();",
                  "status" : "CORRECT"
                },
                {
                  "text" : "class MyClass = new MyObj();",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "new myObj = MyClass();",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "class myObj = new MyClass();",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question10",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jak tworzy się obiekt o nazwie myObj typu MyClass?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "get",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "break",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "void",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "return",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question11",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Które słowo zarezerwowane jest używane w celu zwrócenia wartości?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "stop",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "return",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "break",
                  "status" : "CORRECT"
                },
                {
                  "text" : "exit",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question12",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Które słowo zarezerwowane jest używane w celu przerwania pętli?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "String komunikat = ‘Nieprawidłowa wartość’;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "double cena = 103,12;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "long milion = 1_000_000;",
                  "status" : "CORRECT"
                },
                {
                  "text" : "char wyjscie = “x”;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "char opis = ‘Aparat forograficzny’;",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question13",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Która z poniższych zmiennych jest zainicjowana prawidłowo?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "int x = (int)(55395.5);",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "float x = (float)(1233944.55);",
                  "status" : "CORRECT"
                },
                {
                  "text" : "short x = (short)(33243);",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "byte x = (byte)(255);",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question14",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Które z poniższych rzutowań nie powoduje utraty informacji?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Do definiowania zbioru startowych parametrów, wprowadzanych przez użytkownika podczas uruchomienia programu z wiersza poleceń.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Do definiowania funkcji, która jest w stanie wywołać samą siebie.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Do definiowania zbioru możliwych wartości. Te wartości mogą być modyfikowane w trakcie działania programu.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Do definiowania zbioru możliwych wartości. Te wartości nie mogą być modyfikowane w trakcie działania programu.",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question15",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Do czego służy enum w Javie?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "2, 4 i 8",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "4 i 5",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2 i 8",
                  "status" : "CORRECT"
                },
                {
                  "text" : "4 i 8",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "8",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Wszystkie odpowiedzi są poprawne.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Żadna odpowiedź nie jest poprawna.",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question16",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "W których linijkach kodu słowo static jest użyte prawidłowo?\n\n```java\npublic class A {\n    static int x = 5;\n\n    public static A() {\n        static int y = 8;\n    }\n    \n    public static void B() {\n        int z = 11;\n    }\n}\n```",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Zastąpić System.out.println przez System.out.printf w linijce 4.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Usunąć słowo static z linijki 2.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Zamienić i++ na ++i w linijce 3.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Umieścić linijkę 4 w nawiasach klamrowych.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Zastąpić System.out.println przez System.out.print w linijce 4.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Dopisać int przed i = 0 w linijce 3.",
                  "status" : "CORRECT"
                },
                {
                  "text" : "Dopisać średnik na końcu linijki 3.",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question17",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Co należy poprawić w poniższym programie, aby kod kompilował się?\n\n```java\npublic class A {\n    public static void main(String... args) {\n        for (i = 0; i < 5; i++) {\n            System.out.println(\"Hej!\");\n        }\n    }\n}\n```\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "X5",
                  "status" : "CORRECT"
                },
                {
                  "text" : "5",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Błąd kompilacji.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "X2",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Błąd po uruchomieniu.",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question18",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jaki będzie rezultat wykonania następującego programu?\n\n```java\npublic class A {\n    public static void main(String[] args) {\n        int a = 5;\n        if (a - 3 > 0) {\n            System.out.println(\"X\");\n        }\n        System.out.println(a);\n    }\n}\n```",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "short",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "double",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "int",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "string",
                  "status" : "CORRECT"
                },
                {
                  "text" : "char",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "boolean",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question19",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Który z poniższych typów prostych jest nieprawidłowy?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Błąd po uruchomieniu.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2020-04-01",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2020-03-31",
                  "status" : "CORRECT"
                },
                {
                  "text" : "2020-03-32",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question20",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jaki będzie rezultat wykonania następującego programu?\n\n```java\nimport java.time.LocalDate;\n\npublic class A {\n    public static void main(String[] args) {\n        LocalDate d = LocalDate.of(2020, 3, 31);\n        d.plusDays(1);\n        System.out.println(d);\n    }\n}\n```",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Błąd po uruchomieniu.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "11125",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "675",
                  "status" : "CORRECT"
                },
                {
                  "text" : "111213",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Błąd kompilacji.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "678",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question21",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jaki będzie rezultat wykonania następującego programu?\n\n```java\npublic class A {\n    private static int a;\n\n    public static void main(String[] args) {\n        int a = 5;\n        System.out.println(f(a));\n        System.out.println(f(a));\n        System.out.println(a);\n    }\n\n    public static int f(int x) {\n        a++;\n        return a + x;\n    }  \n}\n```",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Prymitywne.",
                  "status" : "CORRECT"
                },
                {
                  "text" : "Enumy.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Kolekcje.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Obiekty.",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question22",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jakie typy danych zawieraja klasy opakowujące?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "1 bajt",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2 bajty",
                  "status" : "CORRECT"
                },
                {
                  "text" : "4 bajty",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "8 bajtów",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question23",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jaki rozmiar w bajtach ma zmienna typu `char` ?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "double",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "short",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "int",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "long",
                  "status" : "CORRECT"
                },
                {
                  "text" : "float",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Integer",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question24",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Jaki typ zmiennej jest najlepszy do przechowania wyniku działania `1000 * 2500000` ?\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Zadania",
          "task_list" : [
            {
              "name" : "task01",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 100,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n\n        int height = scanner.nextInt();\n        float weight = scanner.nextFloat();\n\n        if (height <= 150 || weight > 180.0f) {\n            System.out.println(\"Przykro mi, nie możesz jechać!\");\n        } else {\n            System.out.println(\"Zapnij pasy!\");\n        }",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    private static final Locale LOCALE = new Locale(\"pl-PL\");\n    private Locale systemLocale;\n\n    @Before\n    public void setUpStreams() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(LOCALE);\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        Locale.setDefault(systemLocale);\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"185\\n70.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Osoba o wzroście 185cm oraz wadze 70kg może jechać.\", \"Zapnij pasy!\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"150\\n70.1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Osoba o wzroście 150cm oraz wadze 70,1kg nie może jechać.\", \"Przykro mi, nie możesz jechać!\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"185\\n180\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Osoba o wzroście 185cm oraz wadze 180kg może jechać.\", \"Zapnij pasy!\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"185\\n181.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Osoba o wzroście 185cm oraz wadze 181kg nie może jechać.\", \"Przykro mi, nie możesz jechać!\", outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który na podstawie zmiennych: wzrost - `height (int)` oraz waga - `weight (float)`, sprawdza czy dana osoba może jechać kolejką górską.\n\nW przypadku kiedy osoba jest wyższa niż 150cm oraz nie przekracza wagi 180kg, program wypisze w konsoli `\"Zapnij pasy!\"`, w przeciwnym wypadku wypisze w konsoli `\"Przykro mi, nie możesz jechać!\"`.\n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task02",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 100,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n\n        float tempInCelsius = scanner.nextFloat();\n\n        System.out.println(1.8f * tempInCelsius + 32.0f);",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    private static final Locale LOCALE = new Locale(\"pl-PL\");\n    private Locale systemLocale;\n\n    @Before\n    public void setUpStreams() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(LOCALE);\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        Locale.setDefault(systemLocale);\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"32.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"32 stopnie Celsjusza to 89.6 stopnie Fahrenheita.\", 89.6, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"62.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"62 stopnie Celsjusza to 143.6 stopnie Fahrenheita.\", 143.6, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"-22.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"-22 stopnie Celsjusza to -7.6 stopni Fahrenheita.\", -7.6, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"0.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"0 stopni Celsjusza to 32 stopnie Fahrenheita.\", 32.0, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który na podstawie zmiennej temperatura w stopniach Celsjusza - `tempInCelsius (float)`, obliczał będzie temperaturę w stopniach Farhenheita (stopnie Fahrenheita = 1.8 * stopnie Celsjusza + 32.0) i wypisywał ją w konsoli.\n\nTemperaturę pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task03",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 100,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n\n        double income = scanner.nextDouble();\n\n        if (income <= 85528.0) {\n            double calculatedTax = income * 0.18 - 556.02;\n\n            if (calculatedTax < 0) {\n                calculatedTax = 0;\n            }\n\n            System.out.println(calculatedTax);\n\n        } else {\n            System.out.println(14839.02 + 0.32 * (income - 85528.0));\n        }",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    private static final Locale LOCALE = new Locale(\"pl-PL\");\n    private Locale systemLocale;\n\n    @Before\n    public void setUpStreams() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(LOCALE);\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        Locale.setDefault(systemLocale);\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"5400.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Podatek od 5.400zł wynosi 415,98zł.\", 415.98, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"543200.54\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Podatek od 543.200,54zł wynosi 161.294,23zł.\", 161294.23, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Podatek od 0,00zł wynosi 0,00zł.\", 0, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"320.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Podatek od 320,00zł wynosi 0,00zł.\", 0.0, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który na podstawie zmiennej: przychód - `income (double)`, obliczał będzie kwotę należnego podatku dochodowego od osób fizycznych i wypisywał ją w konsoli.\n\nPodatek obliczany jest według następujących reguł:  \n* do 85.528,00 podatek wynosi 18% podstawy minus 556,02 PLN, \n* od 85.528,00 podatek wynosi 14.839,02 zł + 32% nadwyżki ponad 85.528,00.\n\nPrzychód pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task04",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 101,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n\n        double amount = scanner.nextDouble();\n        int numberOfInstallments = scanner.nextInt();\n\n        if (amount < 100.0 || amount > 10000.0) {\n            amount = 5000;\n        }\n\n        if (numberOfInstallments < 6 || numberOfInstallments > 48) {\n            numberOfInstallments = 36;\n        }\n\n        double loanInterest;\n        if (numberOfInstallments <= 12) {\n            loanInterest = 0.025;\n        } else if (numberOfInstallments <= 24) {\n            loanInterest = 0.05;\n        } else {\n            loanInterest = 0.1;\n        }\n\n        System.out.println(amount * (1.0 + loanInterest) / numberOfInstallments);",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n\n    public static void main(String[] args) {\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    private static final Locale LOCALE = new Locale(\"pl-PL\");\n    private Locale systemLocale;\n\n    @Before\n    public void setUpStreams() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(LOCALE);\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        Locale.setDefault(systemLocale);\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"10.0\\n10\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Rata od kwoty 10,00zł na 10 miesięcy wynosi 512,50zł ponieważ kwota została zwiększona do 5.000,00zł.\", 512.5, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"100000\\n10\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Rata od kwoty 10.000,00zł na 10 miesięcy wynosi 512,50zł ponieważ kwota została zmniejszona do 5.000,00zł.\", 512.5, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"1000\\n50\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Rata od kwoty 1.000,00zł na 50 miesięcy wynosi 30,56zł ponieważ ilość rat została zmniejszona do 36.\", 30.56, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"1000\\n2\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Rata od kwoty 1.000,00zł na 2 miesiące wynosi 30,56zł ponieważ ilość rat została zwiększona do 36.\", 30.56, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution5() {\n        String inputText = \"7500.50\\n36\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Rata od kwoty 7.500,50zł na 36 miesięcy wynosi 229,18zł.\", 229.18, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który na podstawie zmiennych: kwota - `amount (double)` oraz ilośc rat - `numberOfInstallments (int)`, obliczał będzie miesięczną kwote raty pożyczki i wypisywał ją w konsoli. Parametry posiadają ograniczenia:\n* kwota pożyczki musi mieścić się w przedziale od 100,00zł do 10.000,00zł,\n* liczba rat musi mieścić się w przedziale od 6 do 48.\n\nW przypadku wykroczenia kwoty pożyczki poza akceptowalny przedział, kwota pożyczki powinna być ustawiona na 5.000,00zł. W przypadku wykroczenia ilości rat poza akceptowalny przedział, ilośc rat powinna być ustawiona na 36.\n\nObliczona miesięczna rata powinna zawierać również odsetki. Dla uproszczenia obliczeń, przyjmij, że do kwoty pożyczki doliczasz X procent w zależności od ilości rat:\n* 6-12 rat - 2,5%,\n* 13-24 rat - 5,0%,\n* 25-48 rat - 10,0%,\n\na następnie obliczasz kwotę raty na podstawie ilości rat.\n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task05",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 100,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n        int number = scanner.nextInt();\n\n        for (int i = 1; i <= number; i = i + 2) {\n            System.out.println(i);\n        }",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"15\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 15, program powinien wypisać w konsoli liczby 1, 3, 5, 7, 9, 11, 13, 15.\", \"1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 1, program powinien wypisać w konsoli liczbę 1.\", \"1\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 0, program nie powinien nic wypisać w konsoli.\", \"\", outContent.toString().trim());\n    }\n}"
                }
              },
              "description_text" : "\nNapisz program, który pobiera od użytkownika liczbę całkowitą dodatnią - `number (int)`, a następnie wypisuje w konsoli kolejno wszystkie dodatnie liczby niepatrzyste nie większe od podanej liczby (każda w kolejnej linii). \n\nPrzykładowo dla liczby 15 program powinien wypisać w konsoli liczby w osobnych liniach: 1, 3, 5, 7, 9, 11, 13, 15. \n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task06",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 221,
                      "length" : 31,
                      "possible_answer" : "if (b <= a) {\n            System.out.println(\"Robota skończona\");\n        } else {\n            int sum = 0;\n            for (int i = a; i <= b; i++) {\n                sum += i;\n            }\n\n            System.out.println(sum);\n        }",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"4\\n11\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczb a = 4 oraz b = 11 program powinien wypisać w konsoli liczbę 60.\", \"60\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"9\\n64\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczb a = 9 oraz b = 64 program powinien wypisać w konsoli liczbę 2044.\", \"2044\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"2\\n1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczb a = 2 oraz b = 1 program powinien wypisać w konsoli wiadomość 'Robota skończona'.\", \"Robota skończona\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"2\\n2\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczb a = 2 oraz b = 2 program powinien wypisać w konsoli wiadomość 'Robota skończona'.\", \"Robota skończona\", outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który pobiera od użytkownika dwie liczby całkowite A - `a (int)` oraz B - `b (int)`, gdzie `A < B`, a następnie oblicza sumę ciągu liczb od A do B (A, A + 1, A + 2,  . . . , B) i wypisuje ją w konsoli. Gdy warunek `A < B` nie został spełniony, program kończy pracę wypisuąc w konsoli `\"Robota skończona\"`.  \n\nPrzykładowo dla A = 4 i B = 11 program powinien wypisać w konsoli liczbę 60.\n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task07",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 186,
                      "length" : 31,
                      "possible_answer" : "int currentPowerOfTwo = 1;\n        do {\n            System.out.println(currentPowerOfTwo);\n            currentPowerOfTwo *= 2;\n        } while (currentPowerOfTwo < n);",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"71\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby n = 71 program powinien wypisać w konsoli liczby: 1, 2, 4, 8, 16, 32, 64.\", \"1\\n2\\n4\\n8\\n16\\n32\\n64\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby n = 1 program powinien wypisać w konsoli liczbę 1.\", \"1\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"423\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby n = 423 program powinien wypisać w konsoli liczby: 1, 2, 4, 8, 16, 32, 64, 128, 256.\", \"1\\n2\\n4\\n8\\n16\\n32\\n64\\n128\\n256\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który pobiera od użytkownika liczbę całkowita dodatnią N - `n (int)`, a następnie wyświetla w konsoli wszystkie potęgi liczby 2 nie większe, niż podana liczba (każda liczba w kolejnej linii). \n\nPrzykładowo dla liczby 71 program powinien wypisać w konsoli liczby: 1 2 4 8 16 32 64, każda w nowej linijce.\n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task08",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 150,
                      "length" : 31,
                      "possible_answer" : "int number;\n        int sum = 0;\n        do {\n            number = scanner.nextInt();\n            sum += number;\n        } while (number != 0);\n\n        System.out.println(sum);",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"3\\n2\\n5\\n1\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla ciągu liczb: 3, 2, 5, 1, 0, program powinien wypisać w konsoli liczbę: 11.\", \"11\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"33\\n21\\n54\\n-74\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla ciągu liczb: 33, 21, 54, -74, 0, program powinien wypisać w konsoli liczbę: 34.\", \"34\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"-33\\n-1\\n54\\n-94\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla ciągu liczb: -33, -1, 54, -94, 0, program powinien wypisać w konsoli liczbę: -74.\", \"-74\", outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który pobiera od użytkownika liczby tak długo, jak nie zostanie podana liczba 0. Gdy zostanie podana liczba 0, program oblicza sumę podanych liczb i wypisuje ją w konsoli.\n\nPrzykładowo dla ciągu podawanych liczb: 3, 2, 5, 1, 0, program powinien wypisać w konsoli liczbę 11.\n \nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`. ",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task09",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 150,
                      "length" : 31,
                      "possible_answer" : "int number;\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n\n        do {\n            number = scanner.nextInt();\n\n            if (number > max) {\n                max = number;\n            }\n\n            if (number < min) {\n                min = number;\n            }\n        } while (number != 0);\n\n        System.out.println(max + min);\n        System.out.println((max + min) / 2.0f);",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"1\\n-4\\n2\\n17\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla ciągu liczb: 1, -4, 2, 17, 0, program powinien wypisać w konsoli liczby: 13, 6.5.\", \"13\\n6.5\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"11\\n-44\\n52\\n327\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla ciągu liczb: 11, -44, 52, 327, 0, program powinien wypisać w konsoli liczby: 283, 141.5.\", \"283\\n141.5\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"12\\n24\\n-24\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla ciągu liczb: 12, 24, -24, 0, program powinien wypisać w konsoli liczby: 0, 0.0\", \"0\\n0.0\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który pobiera od użytkownika ciąg liczb całkowitych. Pobieranie danych kończone jest podaniem liczby 0 (nie wliczana do danych). Następnie, program oblicza sumę największej oraz najmniejszej z podanych liczb oraz ich średnią arytmetyczną i wypisuje je w konsoli.\n\nPrzykładowo dla ciągu podawanych liczb: 1, -4, 2, 17, 0, program powinien wypisać w konsoli liczby: 13, 6.5.\n \nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`. ",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task10",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "int number = scanner.nextInt();\n\n        for (int i = 1; i <= number; i++) {\n            if (number % i == 0) {\n                System.out.println(i);\n            }\n        }",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"21\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 21, program powinien wypisać w konsoli liczby: 1, 3, 7, 21.\", \"1\\n3\\n7\\n21\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"49\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 49, program powinien wypisać w konsoli liczby: 1, 7, 49.\", \"1\\n7\\n49\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"1024\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 1024, program powinien wypisać w konsoli liczby: 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024.\", \"1\\n2\\n4\\n8\\n16\\n32\\n64\\n128\\n256\\n512\\n1024\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który pobiera od użytkownika liczbę całkowitą i wypisuje w konsoli wszystkie jej dzielniki w kolejnych liniach. \n\nPrzykładowo dla liczby 21, program powinien wypisać w konsoli liczby: 1, 3, 7, 21, każda w nowej lini.\n \nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`. ",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task11",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 191,
                      "length" : 31,
                      "possible_answer" : "if (number <= 1) {\n            System.out.println(\"Przerywam pracę\");\n            return;\n        }\n\n        boolean isPrimeNumber = true;\n\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                isPrimeNumber = false;\n                break;\n            }\n        }\n\n        if (isPrimeNumber) {\n            System.out.println(\"Tak\");\n        } else {\n            System.out.println(\"Nie\");\n        }",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int number = scanner.nextInt();\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"23\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 23, program powinien wypisać w konsoli wiadomość: 'Tak'.\", \"Tak\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"2\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 2, program powinien wypisać w konsoli wiadomość: 'Tak'.\", \"Tak\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"4\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 4, program powinien wypisać w konsoli wiadomość: 'Nie'.\", \"Nie\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"2000\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 2000, program powinien wypisać w konsoli wiadomość: 'Nie'.\", \"Nie\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution5() {\n        String inputText = \"1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"Dla liczby 1, program powinien wypisać w konsoli wiadomość: 'Przerywam pracę'.\", \"Przerywam pracę\", outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który pobiera od użytkownika liczbę całkowitą większą od 1 i sprawdza czy liczba jest liczbą pierwszą. W przypadku, kiedy liczba ta jest liczbą pierwszą program wypisze w konsoli wiadomość `\"Tak\"`, w przeciwnym przypadku wypisze w konsoli wiadomość `\"Nie\"`. \n\nW przypadku, gdy użytkownik poda liczbę mniejszą lub równą 1, program wypisze w konsoli wiadomość: `\"Przerywam pracę\"`.\n \nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`. ",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task12",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 234,
                      "length" : 31,
                      "possible_answer" : "int[] occurrences = new int[10];\n\n        for (int i = 0; i < numbers.length; i++) {\n            occurrences[numbers[i] - 1] += 1;\n        }\n\n        for (int i = 0; i < occurrences.length; i++) {\n            System.out.println(i + 1 + \" - \" + occurrences[i]);\n        }",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Arrays;\n\npublic class Task {\n    public static void main(String[] args) {\n        int[] numbers = Arrays\n                .stream(args)\n                .mapToInt(Integer::parseInt)\n                .toArray();\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Arrays;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String[] input = new String[]{\"6\", \"5\", \"4\", \"5\", \"10\", \"5\", \"8\", \"3\", \"10\", \"6\", \"6\", \"6\", \"4\", \"3\", \"2\", \"8\", \"1\", \"3\", \"4\", \"7\"};\n\n        Task.main(input);\n\n        String expected = \"1 - 1\\n\" +\n                \"2 - 1\\n\" +\n                \"3 - 3\\n\" +\n                \"4 - 3\\n\" +\n                \"5 - 3\\n\" +\n                \"6 - 4\\n\" +\n                \"7 - 1\\n\" +\n                \"8 - 2\\n\" +\n                \"9 - 0\\n\" +\n                \"10 - 2\";\n\n        assertEquals(String.format(\"Dla tablicy %s, program powinien wypisać w konsoli: \\n%s.\", Arrays.toString(input), expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String[] input = new String[]{\"6\"};\n\n        Task.main(input);\n\n        String expected = \"1 - 0\\n\" +\n                \"2 - 0\\n\" +\n                \"3 - 0\\n\" +\n                \"4 - 0\\n\" +\n                \"5 - 0\\n\" +\n                \"6 - 1\\n\" +\n                \"7 - 0\\n\" +\n                \"8 - 0\\n\" +\n                \"9 - 0\\n\" +\n                \"10 - 0\";\n\n        assertEquals(String.format(\"Dla tablicy %s, program powinien wypisać w konsoli: \\n%s.\", Arrays.toString(input), expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String[] input = new String[]{\"6\", \"9\", \"2\", \"3\", \"2\", \"9\", \"10\"};\n\n        Task.main(input);\n\n        String expected = \"1 - 0\\n\" +\n                \"2 - 2\\n\" +\n                \"3 - 1\\n\" +\n                \"4 - 0\\n\" +\n                \"5 - 0\\n\" +\n                \"6 - 1\\n\" +\n                \"7 - 0\\n\" +\n                \"8 - 0\\n\" +\n                \"9 - 2\\n\" +\n                \"10 - 1\";\n\n        assertEquals(String.format(\"Dla tablicy %s, program powinien wypisać w konsoli: \\n%s.\", Arrays.toString(input), expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który zlicza ile razy wystąpiła każda z liczb w przygotowanej tablicy i wypisuje podsumowanie w konsoli. Tablica może zawierać **tylko** liczby od 1 do 10.\n\nPrzykładowo dla tablicy `[6 5 4 5 10 5 8 3 10 6 6 6 4 3 2 8 1 3 4 7]`, program powinien wypisać w konsoli ilość wystąpień każdej liczby: \n\n* 1 - 1\n* 2 - 1\n* 3 - 3\n* 4 - 3\n* 5 - 3\n* 6 - 4\n* 7 - 1\n* 8 - 2\n* 9 - 0\n* 10 - 2\n\nTablica zawierająca liczby przygotowana jest jako zmienna `numbers`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task13",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "String text = scanner.nextLine();\n\n        if (text.contains(\"Java\")) {\n            System.out.println(\"Znalazłem Java\");\n        }\n        if (text.startsWith(\"Java\")) {\n            System.out.println(\"Zaczyna się od Java\");\n        }\n        if (text.endsWith(\"Java\")) {\n            System.out.println(\"Kończy się na Java\");\n        }\n        if (text.equals(\"Java\")) {\n            System.out.println(\"Równa się Java\");\n        }\n        System.out.println(text.indexOf(\"Java\"));",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"Java\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Znalazłem Java\\n\" +\n                \"Zaczyna się od Java\\n\" +\n                \"Kończy się na Java\\n\" +\n                \"Równa się Java\\n\" +\n                \"0\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"Kurs java od podstaw to najlepsza droga do poznania Java\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Znalazłem Java\\n\" +\n                \"Kończy się na Java\\n\" +\n                \"52\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"Tylko Java!\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Znalazłem Java\\n\" +\n                \"6\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który odczytuje wprowadzony przez użytkownika tekst, a nastepnie: \n\n1. sprawdza czy w tekście występuje słowo \"Java\" - jeżeli tak, wypisuje w konsoli wiadomość \"Znalazłem Java\",\n2. sprawdza czy tekst zaczyna się od słowa \"Java\" - jeżeli tak, wypisuje w konsoli wiadomość \"Zaczyna się od Java\",\n3. sprawdza czy tekst kończy się słowem \"Java\" - jeżeli tak, wypisuje w konsoli wiadomość \"Kończy się na Java\",\n4. sprawdza czy tekst równa się słowu \"Java\" - jeżeli tak, wypisuje w konsoli wiadomość \"Równa się Java\",\n5. wypisuje w konsoli indeks pierwszego wystąpienia słowa \"Java\" w tekście.\n\nPrzykładowo dla tekstu `\"Java\"`, program powinien wypisać w konsoli: \n\n* Znalazłem Java\n* Zaczyna się od Java\n* Kończy się na Java\n* Równa się Java\n* 0\n\na dla tekstu `\"Kurs java od podstaw to najlepsza droga do poznania Java\"`, program powinien wypisać w konsoli:\n\n* Znalazłem Java\n* Kończy się na Java\n* 52\n\n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task14",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "String text = scanner.nextLine();\n\n        System.out.println(text.replaceAll(\",\", \"-MAKARENA\"));",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Lorem ipsum dolor sit amet-MAKARENA consectetur adipiscing elit-MAKARENA sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"A simple, text, really, so, simple!\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"A simple-MAKARENA text-MAKARENA really-MAKARENA so-MAKARENA simple!\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który odczytuje wprowadzony przez użytkownika tekst, a nastepnie dla tego tekstu zamienia wszystkie wystąpienia przecinków na tekst `“-MAKARENA”` i wyświetla w konsoli.\n\nPrzykładowo dla tekstu `\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"`, program powinien wypisać w konsoli `\"Lorem ipsum dolor sit amet-MAKARENA consectetur adipiscing elit-MAKARENA sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"`\n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task15",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 199,
                      "length" : 31,
                      "possible_answer" : "String text = scanner.nextLine();\n        String[] words = text.replaceAll(\"[^a-zA-Z ]\", \"\").toLowerCase().split(\"\\\\s+\");\n        Map<String, Integer> wordsOccurrences = new TreeMap<>();\n\n        for (String word : words) {\n            Integer count = wordsOccurrences.get(word);\n            if (count != null) {\n                count++;\n            } else {\n                count = 1;\n            }\n\n            wordsOccurrences.put(word, count);\n        }\n\n        wordsOccurrences.forEach((key, val) -> System.out.println(key + \" - \" + val));",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Map;\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"Ala lubi koty, ale nie jest przez Koty lubiana.\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"ala - 1\\n\" +\n                \"ale - 1\\n\" +\n                \"jest - 1\\n\" +\n                \"koty - 2\\n\" +\n                \"lubi - 1\\n\" +\n                \"lubiana - 1\\n\" +\n                \"nie - 1\\n\" +\n                \"przez - 1\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"Ala! lubi? koty, ale. nie jest przez Koty lubiana.\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"ala - 1\\n\" +\n                \"ale - 1\\n\" +\n                \"jest - 1\\n\" +\n                \"koty - 2\\n\" +\n                \"lubi - 1\\n\" +\n                \"lubiana - 1\\n\" +\n                \"nie - 1\\n\" +\n                \"przez - 1\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"World. Hello, World!\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"hello - 1\\n\" +\n                \"world - 2\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który odczytuje wprowadzony przez użytkownika tekst, a nastepnie dzieli go na poszczególne słowa. Następnie zlicza ilość wystąpień słów niezależnie od wielkości liter i wypisuje je w konsoli w kolejności alfabetycznej.\n\nPrzykładowo dla tekstu `\"Ala lubi koty, ale nie jest przez Koty lubiana.\"`, program powinien wypisać w konsoli:\n\n* ala - 1\n* ale - 1\n* jest - 1\n* koty - 2\n* lubi - 1\n* lubiana - 1\n* nie - 1\n* przez - 1\n\nZałóż, że w tekscie moga pojawić się dowolne znaki interpunkcyjne.\n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task16",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "String text = scanner.nextLine();\n\n        String reversed = new StringBuilder(text).reverse().toString();\n\n        System.out.println(reversed);",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"Kot\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"toK\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \".auqila angam erolod te erobal tu tnudidicni ropmet domsuie od des ,tile gnicsipida rutetcesnoc ,tema tis rolod muspi meroL\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który przyjmuje od użytkownika tekst, a następnie tworzy łańcuch będący odwróceniem podanego tekstu i wyświetla go w konsoli.\n\nPrzykładowo dla tekstu `\"Kot\"`, program powinien wypisać w konsoli tekst `\"toK\"`.\n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task17",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "char[] text = scanner.nextLine().toCharArray();\n        // Jeżeli nawias jest otwierany to zwiększ o jeden, jeżeli zamykany to zmniejsz o jeden.\n        // W przypadku idealnego wyważenia nawiasów, zmienna powinna miec wartość 0 na koniec iteracji tekstu.\n        int parenthesesOpen = 0;\n\n        for (char c : text) {\n            switch (c) {\n                case '(':\n                    parenthesesOpen++;\n                    break;\n                case ')':\n                    parenthesesOpen--;\n                    break;\n            }\n\n            // Sprawdź co znak, czy nawias nie został zamknięty nie będąc wcześniej otwartym.\n            if (parenthesesOpen < 0) {\n                break;\n            }\n        }\n\n        if (parenthesesOpen != 0) {\n            System.out.println(\"Błędne sparowanie nawiasów\");\n        } else {\n            System.out.println(\"OK\");\n        }",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"2 * (3.4 - (-7)/2)*(a-2)/(b-1)))\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Błędne sparowanie nawiasów\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"(2 * (3.4 - (-7)/2)*(a-2)/(b-1))\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"OK\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \") 2 * 4 (\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Błędne sparowanie nawiasów\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"((2 * 4)\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Błędne sparowanie nawiasów\";\n\n        assertEquals(String.format(\"Dla tekstu %s, program powinien wypisać w konsoli: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który sprawdza czy w podanym przez użytkownika wyrażeniu arytmetycznym nawiasy są poprawnie sparowane. Wyrażenie podawane jest jako pojedynczy łańcuch znaków.\n\nW przypadku, gdy nawiasy są poprawnie sparowane, program powinien wypisać w konsoli wiadomość: `\"OK\"`. W przeciwnym przypadku program powinien wypisać w konsoli wiadomość: `\"Błędne sparowanie nawiasów\"`.\n\n* Przykład a: `\"2 * (3.4 - (-7)/2)*(a-2)/(b-1)))\"`, wynik: `\"Błędne sparowanie nawiasów\"`\n        \n* Przykład b: `\"(2 * (3.4 - (-7)/2)*(a-2)/(b-1))\"` wynik: `\"OK\"`\n\n* Przykład c: `\") 2 * 4 (\"` wynik: `\"Błędne sparowanie nawiasów\"`\n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task18",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "char[] text = scanner.nextLine().toCharArray();\n        int n = scanner.nextInt();\n        char[] cipheredText = new char[text.length];\n\n        for (int i = 0; i < text.length; i++) {\n            if (text[i] == ' ') {\n                cipheredText[i] = text[i];\n                continue;\n            }\n\n            int charCode = ((int) text[i] + n) - 96;\n            charCode = charCode % 26 + 96;\n\n            cipheredText[i] = (char) charCode;\n        }\n\n        System.out.println(new String(cipheredText));",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"ala ma kota\\n1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"bmb nb lpub\";\n\n        assertEquals(String.format(\"Dla tekstu %s oraz n %d, program powinien wypisać w konsoli: %s.\", inputText, 1, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"ala ma kota\\n26\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"ala ma kota\";\n\n        assertEquals(String.format(\"Dla tekstu %s oraz n %d, program powinien wypisać w konsoli: %s.\", inputText, 26, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"To jest zdanie\\n13\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"ab wrfg mqnavr\";\n\n        assertEquals(String.format(\"Dla tekstu %s oraz n %d, program powinien wypisać w konsoli: %s.\", inputText, 13, expected), expected, outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który umożliwia szyfrowanie podanego ciągu znaków przy użyciu szyfru Cezara, który jest szczególnym przypadkiem szyfru podstawieniowego monoalfabetycznego. Program pobiera od użytkownika tekst do zaszyfrowania oraz liczbę n, o którą przesunięty jest alfabet za pomocą którego szyfrowany jest tekst, a następnie wypisuje zaszyfrowany tekst w konsoli. Dla uproszczenia można przyjąć, że łańcuch wejściowy składa się tylko z małych liter alfabetu angielskiego, tj. `'a' - 'z'` oraz spacji.\n\n* Przykład a: tekst: `\"ala ma kota\"`, n: `1`, wynik: `\"bmb nb lpub\"`\n\n* Przykład b: tekst: `\"ala ma kota\"`, n: `26`, wynik: `\"ala ma kota\"`\n\nDane pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task19",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 281,
                      "length" : 31,
                      "possible_answer" : "DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        return LocalDate.parse(input, dateTimeFormatter);",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\npublic class Task {\n    public static void main(String[] args) {\n        // możesz tutaj wywołać metodę w celu testowania\n    }\n\n    public static LocalDate toLocalDate(String pattern, String input) {\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n    @Test\n    public void testSolution() {\n        String pattern = \"dd-MM-yyyy\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        LocalDate date = LocalDate.of(2020, 3, 5);\n\n        LocalDate result = Task.toLocalDate(pattern, date.format(dateTimeFormatter));\n\n        assertEquals(String.format(\"Dla formatu %s oraz daty %s metoda powinna zwrócić poprawny obiekt.\", pattern, date.format(dateTimeFormatter)), date, result);\n    }\n\n    @Test\n    public void testSolution2() {\n        String pattern = \"MM-dd-yyyy\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        LocalDate date = LocalDate.of(2021, 7, 5);\n\n        LocalDate result = Task.toLocalDate(pattern, date.format(dateTimeFormatter));\n\n        assertEquals(String.format(\"Dla formatu %s oraz daty %s metoda powinna zwrócić poprawny obiekt.\", pattern, date.format(dateTimeFormatter)), date, result);\n    }\n\n    @Test\n    public void testSolution3() {\n        String pattern = \"yyyy-MM-dd\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        LocalDate date = LocalDate.of(2022, 3, 7);\n\n        LocalDate result = Task.toLocalDate(pattern, date.format(dateTimeFormatter));\n\n        assertEquals(String.format(\"Dla formatu %s oraz daty %s metoda powinna zwrócić poprawny obiekt.\", pattern, date.format(dateTimeFormatter)), date, result);\n    }\n\n    @Test\n    public void testSolution4() {\n        String pattern = \"yyyy::dd::MM\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        LocalDate date = LocalDate.of(1980, 12, 9);\n\n        LocalDate result = Task.toLocalDate(pattern, date.format(dateTimeFormatter));\n\n        assertEquals(String.format(\"Dla formatu %s oraz daty %s metoda powinna zwrócić poprawny obiekt.\", pattern, date.format(dateTimeFormatter)), date, result);\n    }\n}"
                }
              },
              "description_text" : "Napisz metodę, która przyjmuje format daty oraz datę jako parametry typu String i zwraca obiekt klasy `LocalDate`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task20",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 308,
                      "length" : 31,
                      "possible_answer" : "DateTimeFormatter dateTimeFormatterA = DateTimeFormatter.ofPattern(\"yyyy::MM::dd\");\n        DateTimeFormatter dateTimeFormatterB = DateTimeFormatter.ofPattern(\"MM--yyyy-d\");\n        LocalDate localDateA = LocalDate.parse(dateA, dateTimeFormatterA);\n        LocalDate localDateB = LocalDate.parse(dateB, dateTimeFormatterB);\n\n        Period period = Period.between(localDateA, localDateB);\n\n        return new int[]{period.getYears(), period.getMonths(), period.getDays()};",
                      "placeholder_text" : "// Tu zaimplementuj rozwiązanie"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.time.LocalDate;\nimport java.time.Period;\nimport java.time.format.DateTimeFormatter;\n\npublic class Task {\n    public static void main(String[] args) {\n        // możesz tutaj wywołać metodę w celu testowania\n    }\n\n    public static int[] calculateDifference(String dateA, String dateB) {\n        // Tu zaimplementuj rozwiązanie\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\nimport java.util.Arrays;\n\nimport static org.junit.Assert.assertArrayEquals;\n\npublic class Tests {\n    @Test\n    public void testSolution() {\n        String dateA = \"2014::01::23\";\n        String dateB = \"03--2020-30\";\n        int[] expected = new int[]{6, 2, 7};\n\n        int[] result = Task.calculateDifference(dateA, dateB);\n\n        assertArrayEquals(String.format(\"Dla dat %s oraz %s metoda powinna zwrócić tablicę: %s.\", dateA, dateB, Arrays.toString(expected)), expected, result);\n    }\n\n    @Test\n    public void testSolution2() {\n        String dateA = \"2013::06::01\";\n        String dateB = \"06--2120-01\";\n        int[] expected = new int[]{107, 0, 0};\n\n        int[] result = Task.calculateDifference(dateA, dateB);\n\n        assertArrayEquals(String.format(\"Dla dat %s oraz %s metoda powinna zwrócić tablicę: %s.\", dateA, dateB, Arrays.toString(expected)), expected, result);\n    }\n}"
                }
              },
              "description_text" : "Napisz metodę, która przyjmuje 2 daty jako parametry typu String w formatach kolejno `yyyy::MM::dd` oraz `MM--yyyy-dd`. \n\nMetoda następnie oblicza różnicę między pierwszą a drugą datą. \n\nMetoda zwraca tablicę liczb (int), gdzie pod indeksem 0 znajduje się różnica lat, pod indeksem 1 znajduje się różnica miesięcy a pod indeksem 2 znajduje się różnica dni.\n\nPrzykładowo dla dat `\"2014::01::23\"` oraz `\"03--2020-30\"` zwraca tablicę `[6, 2, 7]`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "title" : "Java podstawy - programowanie",
      "items" : [
        {
          "title" : "Zadania",
          "task_list" : [
            {
              "name" : "task01",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        float speed = scanner.nextFloat();\n        System.out.println(speed * 1.6);",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTestReturningSingleFloat(\"100\", 160);\n    }\n\n    @Test\n    public void testSolution2() {\n        runTestReturningSingleFloat(\"0\", 0);\n    }\n\n    @Test\n    public void testSolution3() {\n        runTestReturningSingleFloat(\"50.83\", 81.328f);\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    private static Locale systemLocale;\n    private static final float FLOAT_TESTS_DELTA = 0.1f;\n\n    @BeforeClass\n    public static void beforeClass() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(new Locale(\"pl-PL\"));\n    }\n\n    @AfterClass\n    public static void afterClass() {\n        Locale.setDefault(systemLocale);\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTestReturningSingleFloat(String input, float expected) {\n        float actual = runForFloat(Task::main, input);\n\n        assertEquals(expected, actual, FLOAT_TESTS_DELTA);\n    }\n\n    private float runForFloat(Consumer<String[]> method, String input) {\n        return Float.parseFloat(run(method, input));\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                }
              },
              "description_text" : "Napisz program, który na podstawie szybkości w milach na godzinę (mph - z ang. *miles per hour*) (wartość podana przez użytkownika, typ - `float`) \nbędzie obliczał szybkość w kilometrach na godzinę (km/h) i wypisywał ją na ekran.\n\nDo przeliczenia użyj wzoru: `szybkość w km/h = 1.6 * szybkość w mph`\n\nSzybkość pobierz od użytkownika w konsoli za pomocą klasy `Scanner`.\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task02",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int x = scanner.nextInt();\n        System.out.println(Math.abs(100 - x) <= 10);",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"100\", \"true\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"91\", \"true\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"90\", \"true\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"110\", \"true\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"111\", \"false\");\n    }\n\n    @Test\n    public void testSolution6() {\n        runTest(\"109\", \"true\");\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                }
              },
              "description_text" : "Napisz program, który wczyta od użytkownika liczbę (typu `int`) i sprawdzi, czy liczba jest \"blisko\" wartości `100`.\nMówimy, że liczba jest \"blisko\" wartości `100`, jeśli różni się od `100` o nie więcej niż `10`.\n\nProgram powinien wczytać jedną liczbę (typu `int`) i na ekran wypisać resultat - `false` lub `true`, zgodnie z opisem powyżej.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task03",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        // Dobrym, choć mało wyszukanym rozwiązaniem będzie zastosowanie instrukcji warunkowej:\n        if ((a > 0 && b < 0) || (a < 0 && b > 0)) {\n            System.out.println(true);\n        } else {\n            System.out.println(false);\n        }\n\n        // równoważny kod można zapisać w skróconej formie:\n        boolean result = (a > 0 && b < 0) || (a < 0 && b > 0);\n        //System.out.println(result);\n        // wyrażene, które normalnie umieszczamy wewnątrz if'a\n        // jest zawsze wyliczane do wartości typu boolean,\n        // którą w tym przypadku możemy po prostu wydrukować\n\n        // Alternatywnie, możemy skorzystać z matematyki:\n        // Jeżeli liczby mają mieć różne znaki, to jedna liczba powinna być z plusem, druga z minusem.\n        // Wynik mnożenia liczby dodatniej i ujemnej zawsze będzie ujemny.\n        // Jeśli wynik będzie dodatni, to znaczy, że albo obie liczby były dodatnie, albo obie były ujemne.\n        // Jeśli będzie równy 0, to znaczy, że co najmniej jedna z liczb była równa zero.\n\n        //System.out.println((long)a * b < 0);\n\n        // Zwróć tylko uwagę, że dowolną z liczb trzeba rzutować na typ long - ponieważ w razie mnożenia dwóch bardzo dużych intów\n        // możemy przekroczyć maksymalny dopuszczalny zakres i dostać błędne wyniki naszego porównania",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"-1\\n1\", \"true\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"0\\n1\", \"false\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"1\\n0\", \"false\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"1\\n1\", \"false\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"-1\\n-1\", \"false\");\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                }
              },
              "description_text" : "Napisz program, który wczyta od użytkownika dwie liczby (typu `int`) i zwróci wartość `true`, jeśli obie liczby\nmają **przeciwne znaki** (np. pierwsza jest dodatnia, a druga ujemna), lub `false` w przeciwnym wypadku. Jeśli jedna z wczytanych\nliczb wynosi 0, program powinien również wypisać `false`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task04",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int ileKgKapustyKupic = scanner.nextInt();\n\n        // obliczamy, ile dużych słoików potrzebujemy - jeżeli tylko mamy możliwość, wolimy kupować duże słoiki.\n        // Dzielenie / w Javie na typach całkowitych \"obcina\" cześc ułamkową\n        // Dla przykładu:\n        // 10 / 7 = 1\n        // 5 / 7 = 0\n        // 21 / 7 = 3\n        int liczbaSloikow7kg = ileKgKapustyKupic / 7;\n\n        // Żeby dowiedzieć się, ile kapusty jeszcze nam brakuje - potrzebujemy reszty z dzielenia powyżej\n        // Możemy ją obliczyć, używając operatora modulo (%):\n        // Dla przykładu:\n        // 10 % 7 = 3\n        // 5 % 7 = 5\n        // 21 % 7 = 0\n\n        int liczbaSloikow1kg = ileKgKapustyKupic % 7;\n\n        // sprawdzamy, czy łączna liczba słoików jest nie większa niż 6.\n        // Wyświetlamy \"true\", jeżeli tak i \"false\" w przeciwnym wypadku\n        System.out.println(liczbaSloikow1kg + liczbaSloikow7kg <= 6);",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"6\", \"true\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"7\", \"true\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"13\", \"false\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"14\", \"true\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"20\", \"false\");\n    }\n\n    @Test\n    public void testSolution6() {\n        runTest(\"43\", \"false\");\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                }
              },
              "description_text" : "Pan Marcin prowadzi sklep spożywczy. Sprzedaje w nim wiele towarów, lecz największym zainteresowaniem cieszy się\nkiszona kapusta, sprzedawana w opakowaniach po 1kg i 7kg. Pan Marcin nie sprzedaje niepełnych opakowań\n(tzn. można u niego kupić tylko pełen 1kg, albo pełne 7kg kiszonej kapusty).\n\nPan Stefan został przez swoją żonę Jolantę wysłany do sklepu po pewną ilość kilogramów kiszonej\nkapusty. Pan Stefan zapomniał torby, przez co może do domu przynieść maksymalnie sześć opakowań kiszonej kapusty (po trzy \nopakowania w każdej z dwóch rąk). Pani Jolanta traktuje zleconą listę zakupów bardzo skrupulatnie - jeśli zamówiła konkretną\nilość kiszonej kapusty, to oczekuje jej dokładnie tyle - nie mniej, nie więcej. \n\nNapisz program, który sprawdza, **czy Pan Stefan jest w stanie na raz przynieść do domu zamówioną ilość kapusty**. Liczbę kilogramów kapusty \nwczytaj z konsoli (dodatni `int`). Załóż, że kapusty w sklepie nigdy nie brakuje. Program powinien wypisać\n`true` lub `false`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task05",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        float f = scanner.nextFloat();\n\n        System.out.println(Math.floor(f));\n        System.out.println(Math.round(f));\n        System.out.println(Math.ceil(f));",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTestForFloats(\"1.4\", 1, 1, 2);\n    }\n\n    @Test\n    public void testSolution2() {\n        runTestForFloats(\"1.5\", 1, 2, 2);\n    }\n\n    @Test\n    public void testSolution3() {\n        runTestForFloats(\"1.6\", 1, 2, 2);\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.function.Consumer;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    private static Locale systemLocale;\n    private static final float FLOAT_TESTS_DELTA = 0.1f;\n\n    @BeforeClass\n    public static void beforeClass() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(new Locale(\"pl-PL\"));\n    }\n\n    @AfterClass\n    public static void afterClass() {\n        Locale.setDefault(systemLocale);\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTestForFloats(String input, float... expected) {\n        List<Float> actual = runForFloats(Task::main, input);\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], actual.get(i), FLOAT_TESTS_DELTA);\n        }\n    }\n\n    private List<Float> runForFloats(Consumer<String[]> method, String input) {\n        String output = run(method, input);\n        return Arrays\n                .stream(output.split(\"\\n\"))\n                .map(s -> s.split(\" \"))\n                .flatMap(Stream::of)\n                .map(f -> Float.parseFloat(f))\n                .collect(Collectors.toList());\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                }
              },
              "description_text" : "Napisz program, który pobierze od użytkownika liczbę niecałkowitą (`float`) i wypisze:\n* jej zaokrąglenie w dół,\n* jej zaokrąglenie zgodnie z zasadami matematyki,\n* jej zaokrąglenie w górę.\n\n<div class=\"hint\">\n\nPodpowiedź: skorzystaj z biblioteki Math i metod: `round()`, `ceil()`, `floor()`. Zajrzyj do dokumentacji, aby sprawdzić ich działanie.\n</div>\n\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task06",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 65,
                      "length" : 12,
                      "possible_answer" : "        // Nic nie stoi na przeszkodzie, aby pętla for nie miała klasycznego \"int i = 0\"\n        // W tablicy ASCII widzimy, że kolejne litery alfabetu są w kolejności po sobie,\n        // zaczynając od 'A' o wartości 65, a kończąc na 'Z' o wartości 90.\n        // Tak naprawdę właśnie taka wartość liczbowa jest przechowywana w zmiennej i\n        // Możesz to podejrzeć używając debuggera\n        for (char i = 'A'; i <= 'Z'; i++) {\n            System.out.println(i);\n        }",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "public class Task {\n    public static void main(String[] args) {\n// your code\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"\", \"A\\nB\\nC\\nD\\nE\\nF\\nG\\nH\\nI\\nJ\\nK\\nL\\nM\\nN\\nO\\nP\\nQ\\nR\\nS\\nT\\nU\\nV\\nW\\nX\\nY\\nZ\");\n    }\n\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\");\n    }\n}\n"
                }
              },
              "description_text" : "Napisz program, który wypisze wszystkie wielkie litery alfabetu łacińskiego w kolejności alfabetycznej. Każda\nlitera powinna być wypisana w kolejnym wierszu.\n\n<div class=\"hint\">\nPodpowiedź: Warto zapoznać się z tablicą ASCII.\n</div>\n\n<div class=\"hint\">\n\nPodpowiedź: stwórz pętlę `for`, gdzie iteratorem będzie zmienna typu `char` przyjmująca wartości od `A` do `Z`.\n</div>\n\n\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task07",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 12,
                      "possible_answer" : "int x = scanner.nextInt();\n        int y = scanner.nextInt();\n\n        // jeżeli którykolwiek z warunków nie jest spełniony - wyjdź z programu\n        if (x > y || x < 0 || y > 10_000) {\n            return;\n        }\n\n        // najmniejsza liczba większa lub równa x i podzielna przez 7\n        int pierwszaLiczbaPodzielnaPrzezSiedem;\n        if (x % 7 == 0) {\n            // liczbe jest podzielna przez 7, więc od niej zaczynamy\n            pierwszaLiczbaPodzielnaPrzezSiedem = x;\n        } else {\n            // musimy wziąć troszeczkę wiekśza liczbę niż x\n            // więc do x dodajemy tyle, ile brakuje do podzielnej przez 7\n            pierwszaLiczbaPodzielnaPrzezSiedem = x + (7 - x % 7);\n        }\n\n        // zaczynamy pętle od znalezionej przez nas liczby i zwiększamy ją o 7 za każdym razem\n        for (int i = pierwszaLiczbaPodzielnaPrzezSiedem; i <= y; i += 7) {\n            System.out.println(i);\n        }\n\n        ////////////////////////////////////////////////\n        // Alternatywnie, inne dopuszczalne rozwiązanie:\n        if (x > y || x < 0 || y > 10_000) {\n            return;\n        }\n        for (int i = x; i <= y; i++) {\n            if (i % 7 == 0) {\n//                System.out.println(i);\n            }\n        }\n        // Jest to zdecydowanie gorsze i bardziej obciążające dla komputera rozwiązanie\n        // Wykonujemy około y-x obiegów pętli i sprawdzanie warunku (if) w każdym\n        // Tymczasem dla pierwszego rozwiązania - obiegów pętli jest około 7 razy mniej (bo i+= 7 zamiast i++) i nie ma instrukcji warunkowej",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // your code\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"-1\\n120\", \"\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"0\\n10001\", \"\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"14\\n21\", \"14\\n21\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"14\\n14\", \"14\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"13\\n34\", \"14\\n21\\n28\");\n    }\n\n    @Test\n    public void testSolution6() {\n        runTest(\"14\\n36\", \"14\\n21\\n28\\n35\");\n    }\n\n    @Test\n    public void testSolution7() {\n        runTest(\"32\\n33\", \"\");\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\");\n    }\n}\n"
                }
              },
              "description_text" : "Napisz program, który:\n1) wczyta od użytkownika liczbę początkową `x` (typu `int`)\n2) wczyta od użytkownika liczbę końcową `y` (typu `int`)\n3) Sprawdzi, czy liczba początkowa jest niewiększa od końcowej i czy obie liczby są z przedziału od `0` (włącznie) do `10 000` (włącznie). Jeśli nie, program zakończy działanie.\n4) Wypisze wszystkie liczby podzielne przez 7 z zadanego zakresu (od `x` włącznie do `y` włącznie).",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task08",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int x = scanner.nextInt();\n\n        if (x >= 0) {\n            for (int i = x; i >= 0; i--) {\n                System.out.print(i + \" \");\n            }\n        } else {\n            for (int i = x; i <= 0; i++) {\n                System.out.print(i + \" \");\n            }\n        }",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"-6\", \"-6 -5 -4 -3 -2 -1 0\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"3\", \"3 2 1 0\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"0\", \"0\");\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                }
              },
              "description_text" : "Napisz program, który pobierze od użytkownika liczbę (typu `int`), a następnie wypisze w jednej linijce\nwszystkie liczby od danej liczby do zera (włącznie). Zwróć uwagę, że liczba może być zerem lub ujemna.\n\nPrzykładowe wyniki działania:\n* dla podanej liczby `5`, program wypisze `5 4 3 2 1 0`\n* dla podanej liczby `0`, program wypisze `0`\n* dla podanej liczby `-4`, program wypisze `-4 -3 -2 -1 0`",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task09",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 12,
                      "possible_answer" : "int n = scanner.nextInt();\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                // drukowanie odstępu dla linii i\n                System.out.print(\" \");\n            }\n            for (int j = 0; j < 2 * i + 1; j++) {\n                // drukowanie choinki dla linii i\n                System.out.print(\"*\");\n            }\n            System.out.println(); // wstawienie nowej linii\n        }\n\n        // nóżka choinki\n        for (int j = 0; j < n - 1; j++) {\n            System.out.print(\" \");\n        }\n        System.out.println(\"#\");",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // your code\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString()\n                .replaceAll(\"\\\\s+$\", \"\")            // drop trailing (trim, but only from end)\n                .replaceAll(\"\\r\\n\", \"\\n\");\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"1\", \"*\\n#\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"3\", \"  *\\n ***\\n*****\\n  #\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"4\", \"   *\\n  ***\\n *****\\n*******\\n   #\");\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który narysuje choinkę zgodnie ze wzorem poniżej. Wysokość choinki wczytaj z konsoli\n(dodatnia liczba całkowita).\n\nPrzykłady: \n\nChoinka o wysokości 3:\n```  \n  *\n ***\n*****\n  #\n```\n\nChoinka o wysokości 4:\n```\n   *\n  ***\n *****\n*******\n   #\n```\n\nPamiętaj, aby napisać kod w taki sposób, aby działał dla dowolnej niezerowej wartości wysokości choinki. Program powinien ją generować używając pojedynczych znaków, a nie zwracać gotowej choinki skopiowanej przez programistę! \n\n<div class=\"hint\">\nPodpowiedź: wyśrodkowanie choinki możesz uzyskać, wstawiając z lewej strony odpowiednią liczbę spacji.\n</div>\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task10",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        String text = scanner.nextLine();\n        text = text.replaceAll(\" \", \"\");    // usuwa spacje\n        text = text.toLowerCase();     // w palindromie nie liczy się wielkość liter\n\n        boolean palindrom = true;\n        for (int i = 0; i < text.length() / 2; i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                palindrom = false;\n                break;\n            }\n        }\n        System.out.println(palindrom);\n\n        // Alternatywnie, zamiast iteracji znak po znaku, można odwrócić Stringa\n        String textReverse = new StringBuilder(text).reverse().toString();\n        //System.out.println(text.equals(textReverse));",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"kajak\", \"true\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"Ka jak\", \"true\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"abccba\", \"true\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"ab bc\", \"false\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"ab ca\", \"false\");\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który wczyta od użytkownika tekst (zmienna typu `String`) i sprawdzi, czy podany tekst jest \npalindromem. Program powinien wypisać wartość `true` lub `false`.\n\nPalindromem nazywamy tekst, który brzmi tak samo czytany od lewej i od prawej. Nie ma znaczenia wielkośc liter ani odstępy. \n\nPalindromem jest na przykład zdanie: `Kobyła ma mały bok`. ",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task11",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 12,
                      "possible_answer" : "String tekst = scanner.nextLine();\n        if (tekst.length() <= 3) {\n            // jeżeli tekst jest krótki, zamieniamy na wielkie litery cały\n            System.out.println(tekst.toUpperCase());\n        } else {\n            String trzyOstatnieZnaki = tekst.substring(tekst.length() - 3);\n            String pozostaleZnaki = tekst.substring(0, tekst.length() - 3);\n            String nowyTekst = pozostaleZnaki + trzyOstatnieZnaki.toUpperCase();\n            System.out.println(nowyTekst);\n        }",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // your code\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"abc\", \"ABC\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"abcd\", \"aBCD\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"ok\", \"OK\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"Ala ma kota\", \"Ala ma kOTA\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"Czy Ala ma kota???\", \"Czy Ala ma kota???\");\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który wczyta od użytkownika tekst (zmienna typu `String`) i zamieni litery spośród trzech ostatnich znaków tekstu na wielkie litery. Jeśli tekst jest krótszy niż 3 znaki, to program powinien zamienić wszystkie wczytane litery.\n\nPrzykład:\n* `Ala ma kota` -> `Ala ma kOTA`\n* `Ala ma kota:)` -> `Ala ma kotA:)`\n* `ok` -> `OK`",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task12",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        String tekst = scanner.nextLine();\n\n        String cenzura = \"***\";\n        tekst = tekst\n                .replaceAll(\"kurka wodna\", cenzura)\n                .replaceAll(\"motyla noga\", cenzura)\n                .replaceAll(\"psiakrew\", cenzura);\n\n        System.out.println(tekst);",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"Znowu sie nie kompiluje, motyla noga!\", \"Znowu sie nie kompiluje, ***!\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"Tu nie ma przeklenstw\", \"Tu nie ma przeklenstw\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"kurka wodna kurka wodna\", \"*** ***\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"psiakrew kurka wodna motyla noga\", \"*** *** ***\");\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który wczyta tekst od użytkownika i \"wykropkuje\" znalezione w nim przekleństwa. Znalezione \nprzekleństwa powinny zostać zastąpione trzema gwiazdkami (`***`). Dla uproszczenia przyjmij,\nże przekleństwa zawsze będą pisane małymi literami.\n\nPrzekleństwa to: `kurka wodna`, `motyla noga`, `psiakrew`.\n\n---\n\nPrzykładowo, tekst: \n\n`Znów się nie kompiluje, motyla noga!`\n \n zamieni się na: \n \n `Znów się nie kompiluje, ***!`",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task13",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 12,
                      "possible_answer" : "int tab[][] = new int[2][5];\n\n        // odczytujemy liczby wpisane przez użytkownika do tablicy dwuwymiarowej\n        for (int i = 0; i < 2; i++) {\n            for (int j = 0; j < 5; j++) {\n                tab[i][j] = scanner.nextInt();\n            }\n        }\n\n        // elementy w tablicy tab[0] to pierwsza piątka\n        // elementy w tablicy tab[1] to druga piątka\n        for (int i = 0; i < 5; i++) {\n            int poszukiwanaLiczba = tab[0][i];\n            // w pętli przeszukujemy całą \"drugą piątkę\"\n            for (int j = 0; j < 5; j++) {\n                if (tab[1][j] == poszukiwanaLiczba) {\n                    System.out.println(poszukiwanaLiczba);\n                    break; // skoro trafiliśmy, nie ma potrzeby dalej sprawdzać\n                }\n            }\n        }",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // your code\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\");\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\npublic class Tests extends BaseTest {\n\n    private String printAsString(int... ints) {\n        return Arrays.stream(ints)\n                .mapToObj(String::valueOf)\n                .collect(Collectors.joining(\"\\n\"));\n    }\n\n    @Test\n    public void testSolution() {\n        runTest(printAsString(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), \"\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(printAsString(1, 2, 3, 4, 5, 1, 2, 3, 4, 5), \"1\\n2\\n3\\n4\\n5\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(printAsString(1, 2, 3, 4, 5, 5, 4, 3, 2, 1), \"1\\n2\\n3\\n4\\n5\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(printAsString(1, 2, 3, 4, 5, 8, 11, 2, 5, 9), \"2\\n5\");\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który pobierze od użytkownika dwa razy po pięć liczb (dziesięć zmiennych typu `int`),\na następnie wypisze tylko te z nich, które wystąpiły zarówno w pierwszej piątce, jak i w drugiej piątce liczb.\nDla uproszczenia załóż, że wśród jednej piątki, liczby nie będą się powtarzały. Liczby wypisz w kolejności takiej,\nw jakiej pojawiły się w pierwszej piątce liczb.\n\n<div class=\"hint\">\nPodpowiedź: warto skorzystać z tablic, jedno- lub dwuwymiarowych.\n</div>\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task14",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        while (b != 0) {\n            int c = a % b;\n            a = b;\n            b = c;\n        }\n\n        System.out.println(a);",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"21\\n24\", \"3\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"16\\n25\", \"1\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"1\\n100\", \"1\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"17\\n17\", \"17\");\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który wczyta od użytkownika dwie całkowite liczby dodatnie i wypisze ich **największy wspólny\n dzielnik** (NWD), korzystając z algorytmu Euklidesa w wersji z modulo.\n \n Największy wspólny dzielnik (NWD) dwóch liczb to największa liczba naturalna, która dzieli bez reszty obie liczby.\n \n Przykładowo, **NWD z `16` i `24` to `8`**, ponieważ `8` jest najmniejszą liczbą, która dzieli zarówno `16` (dając wynik `2`), jaki i `24` (dając wynik `3`).\n \n Algorytm Euklidesa dla liczb `a` i `b` z wykorzystaniem pomocniczej zmiennej `c` jest następujący:\n ```\n1. Dopóki `b!=0` wykonuj kroki 2..5; w przeciwnym wypadku idź do kroku 6.\n2.      c = reszta z dzielenia a przez b\n3.      za 'a' podstaw wartość b\n4.      za 'b' podstaw wartość c\n5.      wróć do linijki 1.\n6. Wynikiem jest liczba a    \n ``` ",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task15",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        int wieksza, mniejsza;\n        if (a > b) {\n            wieksza = a;\n            mniejsza = b;\n        } else {\n            wieksza = b;\n            mniejsza = a;\n        }\n\n        while (wieksza >= mniejsza) {\n            wieksza -= mniejsza;\n        }\n\n        System.out.println(wieksza);",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"24\\n7\", \"3\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"7\\n24\", \"3\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"3\\n9\", \"0\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"9\\n3\", \"0\");\n    }\n\n    @Test\n    public void testSolution6() {\n        runTest(\"20\\n20\", \"0\");\n    }\n}"
                }
              },
              "description_text" : "Napisz program, który wczyta dwie dodanie liczby całkowite (typu `int`) i zwróci resztę z dzielenia liczby większej\nprzez liczbę mniejszą. \n\n**Uwaga!** W ramach utrudnienia, **Twój program NIE może używać operacji modulo (`%`) ani operacji dzielenia (`/`)**.\n\n<div class=\"hint\">\nPodpowiedź: resztę z dzielenia uzyskasz, jeśli od większej liczby będziesz odejmować mniejszą tak długo, aż w końcu \nkolejne odejmowanie spowodowałoby, że liczba znalazłaby się na minusie. \n\nPrzykładowo, aby znaleźć resztę z dzielenia\n`24` przez `7`, należy trzy razy odjąć `7` od `24` (`24 % 7 = 24 - 3*7 = 24 - 21 = 3`)\n</div>\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task16",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int n = scanner.nextInt();\n\n        // używamy zmiennej typu long do przechowywania wyniku\n        // ponieważ zwykły int byłby za mały już dla 13!\n        long wynik = n;\n        while (--n > 0) {\n            wynik *= n;\n        }\n\n        System.out.println(wynik);",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"1\", \"1\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"5\", \"120\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"9\", \"362880\");\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który wczyta dodatnią liczbę całkowitą (`int`) i wypisze jej silnię.\n\nSilnia liczby `n` jest równa: `n! = 1 * 2 * ... * n`\n\nPrzykłady:\n* `5! = 1 * 2 * 3 * 4 * 5 = 120`\n* `3! = 1 * 2 * 3 = 6`",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task17",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 307,
                      "length" : 12,
                      "possible_answer" : "    private static float calculateAverage(int... args) {\n        int sum = 0;\n        for (int i : args) {\n            sum += i;\n        }\n        \n        // koniecznie musimy rzutować zmienną sum na float, aby dokonać dzielenia \"z częścią ułamkową\".\n        // W przeciwnym wypadku - dostalibyśmy dzielenie dwóch zmiennych całkowitych (z \"obciętą resztą\").\n        return (float) sum / args.length;\n    }",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "public class Task {\n\n    public static void main(String[] args) {\n        System.out.println(calculateAverage(1, 4, 2, 5, 6, 8, 11));\n        System.out.println(calculateAverage(1, 5, -11, 192));\n        System.out.println(calculateAverage(1));\n        System.out.println(calculateAverage(1, 1, 1));\n    }\n\n// your code\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.function.Consumer;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    private static Locale systemLocale;\n    private static final float FLOAT_TESTS_DELTA = 0.1f;\n\n    @BeforeClass\n    public static void beforeClass() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(new Locale(\"en-US\"));\n    }\n\n    @AfterClass\n    public static void afterClass() {\n        Locale.setDefault(systemLocale);\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTestForFloats(String input, float... expected) {\n        List<Float> actual = runForFloats(Task::main, input);\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], actual.get(i), FLOAT_TESTS_DELTA);\n        }\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n\n    private List<Float> runForFloats(Consumer<String[]> method, String input) {\n        String output = run(method, input);\n        return Arrays\n                .stream(output.split(\"\\n\"))\n                .map(s -> s.split(\" \"))\n                .flatMap(Stream::of)\n                .map(f -> Float.parseFloat(f))\n                .collect(Collectors.toList());\n    }\n\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTestForFloats(\"\", 5.285714f, 46.75f, 1.0f, 1.0f);\n    }\n\n}"
                }
              },
              "description_text" : "Dopisz metodę, która przyjmuje dowolną liczbę wartości całkowitych (`int`) jako argument i zwróci ich średnią arytmetyczną (typu `float`).\n\n**Nie modyfikuj kodu metody main** - dopisz jedynie metodę `calculateAverage`.\n\n<div class=\"hint\">\n\nPodpowiedź: użyj konstrukcji `int... args` aby przyjąć dowolną liczbę argumentów w metodzie.\n</div>\n\n\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task18",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        String dateText = scanner.nextLine();\n        java.time.LocalDate date = java.time.LocalDate.parse(dateText);\n\n        java.time.LocalDate nextFriday = date;\n        while (nextFriday.getDayOfWeek() != java.time.DayOfWeek.FRIDAY) {\n            nextFriday = nextFriday.plusDays(1);\n        }\n\n        System.out.println(nextFriday);\n\n        // Alternatywnie, wczytując się w dokumentację Date Time API, możemy odnaleźć następujący sposób:\n        nextFriday = date.with(java.time.temporal.TemporalAdjusters.next(java.time.DayOfWeek.FRIDAY));\n        // natomiast jest to bardziej zaawansowane zagadnienie, wykraczające poza zakres tego bloku",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"2020-05-02\", \"2020-05-08\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"2020-05-22\", \"2020-05-22\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"2020-12-31\", \"2021-01-01\");\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który wczyta datę w standardowym formacie `yyyy-MM-dd` i wypisze datę najbliższego piątku w tym samym formacie.\n\n<div class=\"hint\">\n\nAby wczytać datę skanerem, wczytaj najpierw tekst (`String`), a potem przekształć do typu `LocalDate` \nużywając metody `LocalDate.parse(...)`\n</div>\n\n<div class=\"hint\">\n\nAby odnaleźć najbliższy piątek, dodawaj jeden dzień do daty tak długo, aż dojdziesz do piątku.\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task19",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Task {\n    public static void main(String[] args) {\n        Dog reks = new Dog();\n        reks.setName(\"Reks\");\n        reks.wagTail();\n\n        Dog burek = new Dog(\"Burek\");\n        burek.wagTail();\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\");\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"\", \"Reks merda ogonem.\\nBurek merda ogonem.\");\n    }\n\n}"
                },
                "src/Dog.java" : {
                  "name" : "src/Dog.java",
                  "placeholders" : [
                    {
                      "offset" : 23,
                      "length" : 12,
                      "possible_answer" : "private String name;\n\n    public Dog() {\n    }\n\n    public Dog(String name) {\n        this.name = name;\n    }\n\n    public void wagTail() {\n        System.out.println(name + \" merda ogonem.\");\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "public class Dog {\n    // your code\n}\n"
                }
              },
              "description_text" : "W podanym programie uzupełnij kod klasy `Dog` w taki sposób, aby:\n1) kod kompilował się poprawnie,\n2) program wypisywał do konsoli poniższy tekst:\n ```\nReks merda ogonem. \nBurek merda ogonem.\n ```\n\n**Nie modyfikuj metody `main` ani klasy `Task`. Wszelkie zmiany wprowadzaj w kodzie klasy `Dog`.**",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task20",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        String line = scanner.nextLine();\n        System.out.println(line.replaceAll(\"^http://\", \"https://\"));",
                      "placeholder_text" : "// your code"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// your code\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Zly wynik dla ponizszych danych: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"http://sdacademy.pl/\", \"https://sdacademy.pl/\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"https://sdacademy.pl/\", \"https://sdacademy.pl/\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"http://http://sdacademy.pl/\", \"https://http://sdacademy.pl/\");\n    }\n\n}"
                }
              },
              "description_text" : "Napisz program, który będzie wczytywał podany na wejściu tekst (typu `String`, reprezentujący adres www) i będzie zamieniał\nprefix `http://` na `https://` pod warunkiem, że ten będzie znajdował się na początku tekstu.\n\n<div class=\"hint\">\n\nUżyj wrażenia regularnego. Znak specjalny początku tekstu to `^`.\n</div>\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    }
  ],
  "additional_files" : [
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "buildscript {\n    repositories {\n        mavenCentral()\n    }\n}\n\ndef printOutput(def output) {\n    return tasks.create(\"printOutput\") {\n        for (line in output.toString().readLines()) {\n            println \"#educational_plugin\" + line\n        }\n    }\n}\n\nsubprojects {\n    apply plugin: 'application'\n    apply plugin: 'java'\n\n    sourceCompatibility = 1.8\n\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        testImplementation group: 'junit', name: 'junit', version: '4.12'\n    }\n\n    sourceSets {\n        main {\n            java.srcDir 'src'\n        }\n        test {\n            java.srcDir 'test'\n        }\n    }\n\n    mainClassName = project.hasProperty(\"mainClass\") ? project.getProperty(\"mainClass\") : \"\"\n\n    def runOutput = new ByteArrayOutputStream()\n    tasks.run.setStandardOutput(runOutput)\n    tasks.run.doLast { printOutput(runOutput) }\n}\n\nproject(':util') {\n    dependencies {\n        implementation group: 'junit', name: 'junit', version: '4.12'\n    }\n}\n\nconfigure(subprojects.findAll {it.name != 'util'}) {\n  dependencies {\n    implementation project(':util').sourceSets.main.output\n    testImplementation project(':util').sourceSets.test.output\n  }\n}\n"
    }
  ],
  "version" : 11
}